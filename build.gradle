
//
//     __             
//  __|  |___ _ _ ___ 
// |  |  | .'| | | .'|
// |_____|__,|\_/|__,|
// ____________________________________________________________________________
//

apply plugin: 'java'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


//
//  _____                 _ _           _
// | __  |___ ___ ___ ___|_| |_ ___ ___|_|___ ___
// |    -| -_| . | . |_ -| |  _| . |  _| | -_|_ -|
// |__|__|___|  _|___|___|_|_| |___|_| |_|___|___|
//           |_|
// ____________________________________________________________________________
//

buildscript {
	repositories {
        maven { url qiwebLocalRepository }
    	maven {
    		url "https://repo.codeartisans.org/qiweb"
    		credentials { username = "qiweb"; password = "qiweb" }
		}
        mavenCentral()
	}
}
repositories {
    maven { url qiwebLocalRepository }
    maven {
    	url "https://repo.codeartisans.org/qiweb"
    	credentials { username = "qiweb"; password = "qiweb" }
	}
    mavenCentral()
}


//
//  ____                    _             _
// |    \ ___ ___ ___ ___ _| |___ ___ ___|_|___ ___
// |  |  | -_| . | -_|   | . | -_|   |  _| | -_|_ -|
// |____/|___|  _|___|_|_|___|___|_|_|___|_|___|___|
//           |_|
// ____________________________________________________________________________
//

configurations {
    assets
}
dependencies {

    assets "org.webjars:angularjs:1.2.13"
    assets "org.webjars:bootstrap:3.0.3"
    assets "org.webjars:jquery:2.1.0-2"
    assets "org.webjars:marked:0.2.10"

    compile "org.qiweb:org.qiweb.api:0"
    compile "org.qiweb:org.qiweb.modules.liquibase:0"
    compile "org.qiweb:org.qiweb.modules.jpa:0"
    compile "org.qiweb:org.qiweb.modules.json:0"
    compile "org.qiweb:org.qiweb.modules.rythm:0"
    compile "org.hibernate:hibernate-validator:5.0.3.Final"

    runtime "org.qiweb:org.qiweb.server.bootstrap:0"
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    runtime "org.glassfish:javax.el:3.0.0"
    runtime "com.h2database:h2:1.4.178"
    runtime "org.postgresql:postgresql:9.3-1101-jdbc41"

    testCompile "org.qiweb:org.qiweb.test:0"
    testCompile "com.jayway.restassured:rest-assured:2.3.1"
    testCompile "commons-logging:commons-logging:1.1.3"
    testCompile "org.fluentlenium:fluentlenium-festassert:0.9.2"
    testCompile "org.seleniumhq.selenium:selenium-java:2.41.0"

}


//  _____             _
// |  _  |___ ___ ___| |_ ___
// |     |_ -|_ -| -_|  _|_ -|
// |__|__|___|___|___|_| |___|
// ____________________________________________________________________________
//

task extractWebJars( type: Copy ) {
    inputs.file 'build.gradle'
    configurations.assets.files.each {
        from zipTree( it ).matching {
            include 'META-INF/resources/webjars/**'
        }
    }
    eachFile {
        it.path = it.path.replaceAll( 'META-INF/resources/webjars/', '' )
    }
    into 'build/webjars'
}

task concatJs( dependsOn: extractWebJars ) {
    inputs.dir 'src/main/assets/js'
    inputs.dir 'build/webjars'
    outputs.file 'build/assets/js/main.js'
    doLast {
        ant.concat( destfile: 'build/assets/js/main.js' ) {
            fileset( file: 'build/webjars/marked/0.2.10/marked.js' )
            fileset( file: 'build/webjars/jquery/2.1.0/jquery.js' )
            fileset( file: 'build/webjars/bootstrap/3.0.3/js/bootstrap.js' )
            fileset( file: 'build/webjars/angularjs/1.2.13/angular.js' )
            fileset( file: 'build/webjars/angularjs/1.2.13/angular-route.js' )
            fileset( file: 'build/webjars/angularjs/1.2.13/angular-sanitize.js' )
            fileset( file: 'src/main/assets/js/main.js' )
        }
    }
}
task prepareLessFiles( type: Copy, dependsOn: extractWebJars ) {
    from 'build/webjars/bootstrap/3.0.3/less'
    from 'src/main/assets/less/main.less'
    into 'build/less'
}

buildscript { dependencies { classpath 'de.obqo.gradle:gradle-lesscss-plugin:1.0-1.3.3' } }
apply plugin: 'lesscss'
lesscss {
    source = fileTree( 'build/less' ) {
        include 'main.less'
    }
    dest = 'build/assets/css'
    compress = true
}
task optimizeCss( type: de.obqo.gradle.lesscss.LessTask, dependsOn: prepareLessFiles ) { }

task copyFonts( type: Copy, dependsOn: extractWebJars ) {
    from 'build/webjars/bootstrap/3.0.3/fonts'
    into 'build/generated-src/assets/resources/assets/fonts'
}

task copyAssets( type: Copy, dependsOn: [ concatJs, optimizeCss, copyFonts ] ) {
    from 'build/assets'
    into 'build/generated-src/assets/resources/assets'
}

processResources.dependsOn copyAssets
sourceSets.main.resources.srcDir file( "build/generated-src/assets/resources" )


//
//  _____ _ _ _ _     _
// |     |_| | | |___| |_
// |  |  | | | | | -_| . |
// |__  _|_|_____|___|___|
//    |__|
// ____________________________________________________________________________
//

buildscript { dependencies { classpath 'org.qiweb:org.qiweb.gradle:0' } }
apply plugin: 'qiweb'
devshell {
    extraWatch += [ "src/main/assets", "src/main/web" ]
}


//
//  ____                            _       _   _
// |    \ ___ ___ _ _ _____ ___ ___| |_ ___| |_|_|___ ___
// |  |  | . |  _| | |     | -_|   |  _| .'|  _| | . |   |
// |____/|___|___|___|_|_|_|___|_|_|_| |__,|_| |_|___|_|_|
//

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/content/aalmiray/asciidoctor' }
        maven { url 'http://jcenter.bintray.com' }
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'
    }
}
apply plugin: 'asciidoctor'
asciidoctor {
    inputs.dir file( 'src/doc' )
    sourceDir = file( 'src/doc' )
    outputDir = file( 'build/docs/asciidoctor' )
    backend = 'html5'
    options = [
        compact: true,
        attributes: [
            'qiweb-version': version,
            'beerdb-version': version,
            'toc2': ''
        ]
    ]
    logDocuments = true
}


//  _____         _           _
// |  _  |___ ___| |_ ___ ___|_|___ ___
// |   __| .'|  _| '_| .'| . | |   | . |
// |__|  |__,|___|_,_|__,|_  |_|_|_|_  |
//                       |___|     |___|
// ____________________________________________________________________________
//

apply plugin: 'application'
applicationName = 'beerdb'
mainClassName = 'org.qiweb.server.bootstrap.Main'
applicationDistribution.from( "src/main/resources" ) {
    include "*.conf"
    into "etc"
}
startScripts {
    defaultJvmOpts = [ "-server", "-Xmx128m" ]
}
tasks.startScripts {
    doLast {
        def scriptShellFile = file "${outputDir}/${applicationName}"
        def scriptBatchFile = file "${outputDir}/${applicationName}.bat"
        scriptShellFile.text = scriptShellFile.text.replace( 'CLASSPATH=$APP_HOME/lib',
                                                             'CLASSPATH=$APP_HOME/etc/:$APP_HOME/lib')
        scriptBatchFile.text = scriptBatchFile.text.replace( 'CLASSPATH=%APP_HOME%\\lib',
                                                             'CLASSPATH=%APP_HOME%\\etc\\;%APP_HOME%\\lib' )
    }
}
artifacts {
    archives distZip
}


//
//  _____             _          ____          _                       _
// |  |  |___ ___ ___| |_ _ _   |    \ ___ ___| |___ _ _ _____ ___ ___| |_
// |     | -_|  _| . | '_| | |  |  |  | -_| . | | . | | |     | -_|   |  _|
// |__|__|___|_| |___|_,_|___|  |____/|___|  _|_|___|_  |_|_|_|___|_|_|_|
//                                        |_|       |___|
// ____________________________________________________________________________
//

task stage(dependsOn: ['clean', 'installApp'])
